// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Start_Drive.API.Data;

#nullable disable

namespace Start_Drive.API.Migrations
{
    [DbContext(typeof(StartDriveDbContext))]
    [Migration("20250311151503_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Start_Drive.API.Models.ADrivingSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId")
                        .IsUnique();

                    b.ToTable("ADrivingSchools");
                });

            modelBuilder.Entity("Start_Drive.API.Models.CourseRoundsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("CourseRounds");
                });

            modelBuilder.Entity("Start_Drive.API.Models.CourseRoundsStudentsId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseRoundStudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseRoundsModelId")
                        .HasColumnType("int");

                    b.Property<int>("IdDrivingSchool")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseRoundsModelId");

                    b.ToTable("CourseRoundsStudentsIds");
                });

            modelBuilder.Entity("Start_Drive.API.Models.GeneratedRegistrationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DrivingSchoolEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("GeneratedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("GeneratedRegistrationCodes");
                });

            modelBuilder.Entity("Start_Drive.API.Models.Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("ForWhom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Informations");
                });

            modelBuilder.Entity("Start_Drive.API.Models.Login", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolOrStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("Start_Drive.API.Models.OpenClose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<double>("FirstHour")
                        .HasColumnType("float");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<double>("LastHour")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("OpenCloses");
                });

            modelBuilder.Entity("Start_Drive.API.Models.RegisterSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BreakBetweenRides")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RegisterSchools");
                });

            modelBuilder.Entity("Start_Drive.API.Models.SingleClose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateCloseKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<bool>("OpenCloseValue")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("SingleCloses");
                });

            modelBuilder.Entity("Start_Drive.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Start_Drive.API.Models.StudentsHourDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAddedDrive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<double>("MainHourFrom")
                        .HasColumnType("float");

                    b.Property<double>("MainHourTo")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.HasIndex("InstructorId");

                    b.ToTable("StudentsHourDrives");
                });

            modelBuilder.Entity("Start_Drive.API.Models.forumModel.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("WhoReplied")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Answerss");
                });

            modelBuilder.Entity("Start_Drive.API.Models.forumModel.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AskedQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Questionss");
                });

            modelBuilder.Entity("Start_Drive.API.Models.instructorModel.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrivingSchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrivingSchoolId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Start_Drive.API.Models.instructorModel.InstructorAbsence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateAbsenceKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDrivingSchool")
                        .HasColumnType("int");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonAbsenceValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAbsences");
                });

            modelBuilder.Entity("Start_Drive.API.Models.ADrivingSchool", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithOne("AboutDriving")
                        .HasForeignKey("Start_Drive.API.Models.ADrivingSchool", "DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.CourseRoundsModel", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("CourseRounds")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.CourseRoundsStudentsId", b =>
                {
                    b.HasOne("Start_Drive.API.Models.CourseRoundsModel", "CourseRoundsModel")
                        .WithMany("StudentsThisRoundCourse")
                        .HasForeignKey("CourseRoundsModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseRoundsModel");
                });

            modelBuilder.Entity("Start_Drive.API.Models.GeneratedRegistrationCode", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("GeneratedCodes")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.Information", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("InfoForMembers")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.OpenClose", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("OpenCloseSchool")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.SingleClose", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("ClosedSingleDays")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.Student", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("Students")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.StudentsHourDrive", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("DrivingLessonsStudents")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Start_Drive.API.Models.instructorModel.Instructor", "Instructor")
                        .WithMany("StudentsHourDrivesSchool")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Start_Drive.API.Models.forumModel.Answers", b =>
                {
                    b.HasOne("Start_Drive.API.Models.forumModel.Questions", "Questions")
                        .WithMany("Answer")
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Start_Drive.API.Models.forumModel.Questions", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("Forum")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.instructorModel.Instructor", b =>
                {
                    b.HasOne("Start_Drive.API.Models.RegisterSchool", "DrivingSchool")
                        .WithMany("Instructors")
                        .HasForeignKey("DrivingSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingSchool");
                });

            modelBuilder.Entity("Start_Drive.API.Models.instructorModel.InstructorAbsence", b =>
                {
                    b.HasOne("Start_Drive.API.Models.instructorModel.Instructor", "Instructor")
                        .WithMany("InstructorDaysOff")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Start_Drive.API.Models.CourseRoundsModel", b =>
                {
                    b.Navigation("StudentsThisRoundCourse");
                });

            modelBuilder.Entity("Start_Drive.API.Models.RegisterSchool", b =>
                {
                    b.Navigation("AboutDriving");

                    b.Navigation("ClosedSingleDays");

                    b.Navigation("CourseRounds");

                    b.Navigation("DrivingLessonsStudents");

                    b.Navigation("Forum");

                    b.Navigation("GeneratedCodes");

                    b.Navigation("InfoForMembers");

                    b.Navigation("Instructors");

                    b.Navigation("OpenCloseSchool");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Start_Drive.API.Models.forumModel.Questions", b =>
                {
                    b.Navigation("Answer");
                });

            modelBuilder.Entity("Start_Drive.API.Models.instructorModel.Instructor", b =>
                {
                    b.Navigation("InstructorDaysOff");

                    b.Navigation("StudentsHourDrivesSchool");
                });
#pragma warning restore 612, 618
        }
    }
}
