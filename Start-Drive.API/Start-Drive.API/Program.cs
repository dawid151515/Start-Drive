using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Start_Drive.API;
using Start_Drive.API.Data;
using Start_Drive.API.Middleware;
using Start_Drive.API.Services;
using Start_Drive.API.Services.StartDriveServices;
using System.Text;
using System.Text.Json.Serialization;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();
builder.Services.Configure<Microsoft.AspNetCore.Http.Json.JsonOptions>(options => options.SerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles);

//add a connection to the database in the options we add a connection string
builder.Services.AddDbContext<StartDriveDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("StartDriveConnectionString")));

//jwt
var config = builder.Configuration;
var secret = config["AuthSettings:securityKey"];

builder.Services.AddAuthentication(auth =>
{
    auth.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    auth.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    auth.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(jwt =>
{
    jwt.RequireHttpsMetadata = false;
    jwt.SaveToken = true;
    jwt.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = config["AuthSettings:validIssuer"],
        ValidAudience = config["AuthSettings:validAudience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret)),
        ClockSkew = TimeSpan.Zero
    };
});

//AutoMapper
builder.Services.AddAutoMapper(typeof(StartDriveAutoMapperProfile));

//register the interfaces
builder.Services.AddScoped<ILoginService, LoginService>();
builder.Services.AddScoped<IRegisterSchoolService, RegisterSchoolService>();
builder.Services.AddScoped<IInstructorService, InstructorService>();
builder.Services.AddScoped<IStudentService, StudentService>();
builder.Services.AddScoped<ICourseRoundService, CourseRoundService>();
builder.Services.AddScoped<IMainCalendarServices, MainCalendarServices>();
builder.Services.AddScoped<IInformationService, InformationService>();
builder.Services.AddScoped<IForumService, ForumService>();
builder.Services.AddScoped<ISettingsService, SettingsService>();
builder.Services.AddScoped<IAboutSchoolService, AboutSchoolService>();
builder.Services.AddScoped<IGeneratedRegistrationCodeService, GeneratedRegistrationCodeService>();


//register our middleware to handle errors in the entire application
builder.Services.AddScoped<ErrorHandlingMiddleware>();

//Configuring Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


var app = builder.Build();

//add our middleware before receiving any request to the API, i.e. before the line app.UseHttpsRedirection();
app.UseMiddleware<ErrorHandlingMiddleware>();

// Configure the HTTP request pipeline.
app.UseHttpsRedirection();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        //we set the endpoint to the swagger file, this is the default path to the file generated by swagger
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Start_Drive API");
    });
}

//here we allow our angular application to send requests to our application, allows all originy method headers
app.UseCors(policy => policy.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
